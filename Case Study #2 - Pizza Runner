CREATE SCHEMA pizza_runner;
SET search_path = pizza_runner;

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  runner_id INTEGER,
  registration_date DATE
);
INSERT INTO runners
  (runner_id, registration_date)
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');

  DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  order_id INTEGER,
  customer_id INTEGER,
  pizza_id INTEGER,
  exclusions VARCHAR(4),
  extras VARCHAR(4),
  order_time TIMESTAMP
);

INSERT INTO customer_orders
  (order_id, customer_id, pizza_id, exclusions, extras, order_time)
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');

DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  order_id INTEGER,
  runner_id INTEGER,
  pickup_time VARCHAR(19),
  distances VARCHAR(7),
  duration VARCHAR(10),
  cancellation VARCHAR(23)
);

INSERT INTO runner_orders
  (order_id, runner_id, pickup_time, distances, duration, cancellation)
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  pizza_id INTEGER,
  pizza_name TEXT
);
INSERT INTO pizza_names
  (pizza_id, pizza_name)
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  pizza_id INTEGER,
  toppings TEXT
);
INSERT INTO pizza_recipes
  (pizza_id, toppings)
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  topping_id INTEGER,
  topping_name TEXT
);
INSERT INTO pizza_toppings
  (topping_id, topping_name)
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');


--DATA CLEANING 
SELECT
  table_name,
  column_name,
  data_type
FROM information_schema.columns
WHERE table_name = 'customer_orders';

SHOW COLUMNS FROM customer_orders;

--Transform customer_orders table
CREATE TEMPORARY TABLE customer_orders_temp AS
SELECT order_id, customer_id, pizza_id,
       CASE 
           WHEN exclusions IS NULL OR exclusions LIKE 'null' THEN ''
           ELSE exclusions
           END AS exclusions,
       CASE 
          WHEN extras IS NULL OR extras LIKE 'null' THEN ''
          ELSE extras
         END AS extras,
      order_time
FROM customer_orders

--Check data types runner_orders table
SHOW COLUMNS FROM runner_orders;

--Transform runner_orders table
CREATE TEMPORARY TABLE runner_orders_temp AS
SELECT order_id, runner_id,
       CASE 
           WHEN pickup_time IS NULL OR pickup_time LIKE 'null' THEN ''
           ELSE pickup_time
           END AS pickup_time,
        CASE 
            WHEN distances LIKE '' OR distances LIKE 'null' THEN NULL
            WHEN distances LIKE '%km' THEN TRIM('km' FROM distances)
            ELSE distances
            END AS distances,
        CASE 
            WHEN duration LIKE '' OR duration LIKE 'null' THEN NULL
            WHEN duration LIKE '%minute' THEN TRIM('minute' FROM duration)
            WHEN duration LIKE '%minutes' THEN TRIM('minutes' FROM duration)
            WHEN duration LIKE '%mins' THEN TRIM ('mins' FROM duration)
            ELSE duration
            END AS duration,
        CASE
            WHEN cancellation IS NULL OR cancellation LIKE 'null' THEN ''
            ELSE cancellation
            END AS cancellation
FROM runner_orders;

DROP TEMPORARY TABLE runner_orders_temp;
SELECT * from runner_orders_temp;

--Transform data types
ALTER TABLE customer_orders_temp
MODIFY COLUMN order_time DATETIME;

ALTER TABLE runner_orders_temp
MODIFY COLUMN distances FLOAT NULL;

ALTER TABLE runner_orders_temp
MODIFY COLUMN duration INT;

--Update runner_orders_table where data type is wrong for pickup_time
UPDATE runner_orders_temp
SET pickup_time = NULL
WHERE order_id IN (6,9);

ALTER TABLE runner_orders_temp
MODIFY COLUMN pickup_time DATETIME;

---NORMALIZE PIZZA RECIPE TABLE
drop table if exists pizza_recipes1;
create table pizza_recipes1 
(
 pizza_id int,
    toppings int);
insert into pizza_recipes1
(pizza_id, toppings) 
values
(1,1),
(1,2),
(1,3),
(1,4),
(1,5),
(1,6),
(1,8),
(1,10),
(2,4),
(2,6),
(2,7),
(2,9),
(2,11),
(2,12);

 
----A. PIZZA METRICS ---
-- 1.How many pizzas were ordered?
SELECT COUNT(*) AS pizza_order_count
FROM customer_orders_temp;
-- 2.How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) AS unique_customer_count
FROM customer_orders_temp;
-- 3.How many successful orders were delivered by each runner?
SELECT COUNT(order_id) AS successful_delivery_count, runner_id FROM runner_orders_temp
WHERE cancellation LIKE ''
GROUP BY runner_id;
-- 4.How many of each type of pizza was delivered?
SELECT pizza_name, COUNT(c.order_id) AS ord_count
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
JOIN pizza_names p
  ON c.pizza_id = p.pizza_id
WHERE r.cancellation LIKE ''
GROUP BY p.pizza_name;
-- 5.How many Vegetarian and Meatlovers were ordered by each customer?
SELECT c.customer_id, p.pizza_name, COUNT(c.order_id) AS pizza_count
FROM customer_orders_temp c
JOIN pizza_names p
  ON c.pizza_id = p.pizza_id
GROUP BY c.customer_id, p.pizza_name
ORDER BY c.customer_id;
-- 6.What was the maximum number of pizzas delivered in a single order?
--This method give a correct result but there is a better way. 
-- What if there are 2 orders with the same maximum pizza amount order?
SELECT c.order_id, COUNT(c.pizza_id) AS maximum_ord_count
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
WHERE r.cancellation LIKE ''
GROUP BY c.order_id
ORDER BY COUNT(c.pizza_id) DESC
LIMIT 1;

---Use this instead
WITH a AS 
(
SELECT c.order_id, COUNT(c.pizza_id) AS pizza_count
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
WHERE r.cancellation LIKE ''
GROUP BY c.order_id
)
SELECT MAX(pizza_count) AS maximum_pizza_ord
FROM a;

-- 7.For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT c.customer_id, 
SUM (CASE 
     WHEN exclusions = '' AND extras = '' THEN 1
     ELSE 0
     END) AS no_changes,
SUM (CASE 
     WHEN exclusions != '' OR extras != ''  THEN 1
     ELSE 0
     END) AS changes
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
WHERE cancellation LIKE ''
GROUP BY customer_id;

-- 8.How many pizzas were delivered that had both exclusions and extras?
SELECT COUNT(*) AS delivered_pizza_w_changes
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
WHERE exclusions NOT LIKE '' 
AND extras NOT LIKE ''
AND cancellation LIKE '';

-- 9.What was the total volume of pizzas ordered for each hour of the day?
SELECT HOUR(order_time) AS time_order, COUNT(*) AS hour_ord_count
FROM customer_orders_temp
GROUP BY HOUR(order_time)
ORDER BY order_time;

-- 10.What was the volume of orders for each day of the week?
--Use DAYNAME() function to The DAYNAME function to retrieve the name of the week day of a given date
--Use DAYOFWEEK() to return an integer representing the day of the week that can be used to order the result sets
SELECT DAYNAME(order_time) AS day_of_week, COUNT(*) AS num_orders
FROM customer_orders_temp
GROUP BY DAYNAME(order_time), DAYOFWEEK(order_time)
ORDER BY DAYOFWEEK(order_time) ASC;

-- B. RUNNER AND CUSTOMER EXPERIENCE
-- 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
--Method: Reset the starting day of the week to monday
SELECT registration_date, WEEK(registration_date,1) as week_numb, COUNT (runner_id) 
FROM runners
GROUP BY registration_date,week_numb;

-- Automatically sets Sunday to be the first day of the week and 2021/01/01 is Friday, therefore, using DATE_ADD to shift the start of the week. In other words, shifting the registration day to the start of the week.
-- Friday (2021/01/01) + 2 days 2021/01/03 --> WEEK()--> week 1 and so on, regardless of the original date.
SELECT DAYNAME(registration_date), WEEK(DATE_ADD(registration_date, INTERVAL 2 DAY)) as week_numb, COUNT(runner_id)
FROM runners
GROUP BY DAYNAME(registration_date), week_numb;


-- 2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
--USE TIMESTAMPDIFF() to calculate the difference between two timestamp
--SELF-NOTE: 1st timestamp, 2 timestamp
SELECT r.runner_id, ROUND(AVG(TIMESTAMPDIFF(MINUTE,(c.order_time), (r.pickup_time))),1) AS average_time
FROM customer_orders_temp c
JOIN runner_orders_temp r
ON c.order_id = r.order_id
GROUP BY r.runner_id;
-- 3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
--This gives the average prep time for each number amount of pizza in an order. An order with 2 pizza takes 18 minutes to complete (), making it the ultimate effeciency rate.
WITH a AS 
(
  SELECT c.order_time, r.pickup_time, COUNT(c.pizza_id) AS pizza_count
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
GROUP BY c.order_id, c.order_time, r.pickup_time
)

SELECT pizza_count, ROUND(AVG(TIMESTAMPDIFF(MINUTE,(order_time), (pickup_time))),1) AS prep_time
FROM a
GROUP BY pizza_count;

--This gives the pizza_counts of each order and their prep time respectively
SELECT COUNT(c.pizza_id) AS pizza_count, ROUND(TIMESTAMPDIFF(MINUTE,(c.order_time), (r.pickup_time)),1) AS prep_time
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
GROUP BY c.order_id, prep_time ;

-- 4. What was the average distance travelled for each customer?
SELECT c.customer_id, AVG(r.distances)
FROM customer_orders_temp c
JOIN runner_orders_temp r
  ON c.order_id = r.order_id
WHERE r.distances IS NOT NULL
GROUP BY c.customer_id;

-- 5. What was the difference between the longest and shortest delivery times for all orders?
SELECT MAX(duration) - MIN(duration) AS max_min_duration_difference
FROM runner_orders_temp;
-- 6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT runner_id, order_id, duration, distances, ROUND((distances/(duration/60))) AS speed
FROM runner_orders_temp
WHERE distances IS NOT NULL
GROUP BY runner_id, order_id, duration, distances;

-- 7. What is the successful delivery percentage for each runner?
SELECT runner_id, 
ROUND(SUM(CASE
WHEN pickup_time IS NOT NULL THEN 1 
END)*100/COUNT(*)) AS successful_percent
FROM runner_orders_temp
GROUP BY runner_id;

-- C. INGREDIENT OPTIMISATION
-- What are the standard ingredients for each pizza?
-- GROUP_CONCAT can be used to concatenate the values of a column for each group into a single string, separated by commas. (MySQL specific funtion)
--This can be solve be using views or cte. Here is using view method:
CREATE VIEW recipe_for_pizza AS
SELECT n.pizza_name, t.topping_name
FROM pizza_names n
JOIN pizza_recipes1 r
  ON n.pizza_id = r.pizza_id
JOIN pizza_toppings t
  ON r.toppings = t.topping_id
ORDER BY n.pizza_name;

SELECT pizza_name, GROUP_CONCAT(topping_name)
FROM recipe_for_pizza
GROUP BY pizza_name;

-- What was the most commonly added extra?
CREATE TEMPORARY TABLE tmp_extras (
  order_id INT,
  extras VARCHAR(4)
);

INSERT INTO tmp_extras (order_id, extras)
SELECT order_id, SUBSTRING_INDEX(SUBSTRING_INDEX(extras, ',',n),',',-1) AS extras
FROM customer_orders_temp
JOIN (
SELECT 1 AS n
UNION ALL SELECT 2
UNION ALL SELECT 3
) AS numbers ON CHAR_LENGTH(extras) - CHAR_LENGTH(REPLACE(extras, ',','')) >= n-1
WHERE extras !='';

SELECT t.topping_name, COUNT(extras)
FROM pizza_toppings t
JOIN tmp_extras tmp
  ON t.topping_id = tmp.extras
GROUP BY topping_name
LIMIT 1;

-- What was the most common exclusion?
---This doesn't give the right answer. BUT FIND_IN_SET return the position of a string within a list of string.
SELECT c.order_id, c.exclusions, t.topping_name
FROM customer_orders_temp c
JOIN pizza_toppings t
  ON FIND_IN_SET(t.topping_id,c.exclusions)
ORDER BY c.order_id;

--this approach requires you to manually specify the maximum number of values that can appear in the exclusions column
-- and add a UNION ALL statement for each possible value.
--- This gives quite ok resul, but the string operation is expensive because the use of SUBSTRING_INDEX and REPLACE.
--- This make it a less efficient and scalable solution for querying your data, especially if you have a large dataset.
With exclusions_temp AS 
(
SELECT order_id, SUBSTRING_INDEX(SUBSTRING_INDEX(exclusions, ',', n), ',', -1) AS exclusions
FROM customer_orders_temp
JOIN (
    SELECT 1 AS n
    UNION ALL SELECT 2
    UNION ALL SELECT 3
    -- Add more UNION ALL statements for each possible value in the exclusions column
) AS numbers ON CHAR_LENGTH(exclusions) - CHAR_LENGTH(REPLACE(exclusions, ',', '')) >= n - 1
WHERE exclusions != ''
)
SELECT t.topping_name, COUNT(exclusions)
FROM pizza_toppings t
JOIN exclusions_temp e
  ON t.topping_id = e.exclusions
GROUP BY t.topping_name;

---Update the customer_orders_temp
CREATE TEMPORARY TABLE tmp_exclusions (
   order_id INT,
   exclusions VARCHAR(4)
);

---the exclusions column contains a comma-separated list of values, 
--we need to join with all possible values of n that correspond to an index of a comma in the exclusions string. Therefore, number of commas have be >= n-1
--Explain: comma + 1 = length of the string. Therefore, in order to extract all from the string, it must be n + 1. 
--For example, string 1,2 has one comma, if we only use n = 1, it only gives the result of 1 but n=2 2 gives the result of 1,2
INSERT INTO tmp_exclusions (order_id, exclusions)
SELECT order_id, SUBSTRING_INDEX(SUBSTRING_INDEX(exclusions, ',', n), ',', -1) AS exclusions
FROM customer_orders_temp
JOIN (
    SELECT 1 AS n
    UNION ALL SELECT 2
    UNION ALL SELECT 3
    -- Add more UNION ALL statements for each possible value in the exclusions column
) AS numbers ON CHAR_LENGTH(exclusions) - CHAR_LENGTH(REPLACE(exclusions, ',', '')) >= n - 1
WHERE exclusions != ''
;

--Checking--
DROP TEMPORARY TABLE tmp_exclusions;
SELECT * FROM tmp_exclusions;

---Remove LIMIT 1 to see if there are more than 1 highest values.
-- COUNT(*) can be used in ORDER BY
SELECT t.topping_name, COUNT(exclusions) AS exclusions_count
FROM pizza_toppings t
JOIN tmp_exclusions tmp
  ON t.topping_id = tmp.exclusions
GROUP BY t.topping_name
ORDER BY COUNT(*) DESC
LIMIT 1;

-- Generate an order item for each record in the customers_orders table in the format of one of the following:
-- Meat Lovers
-- Meat Lovers - Exclude Beef
-- Meat Lovers - Extra Bacon
-- Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
-- Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
-- For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
-- What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

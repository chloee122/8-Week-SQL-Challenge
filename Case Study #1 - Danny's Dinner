CREATE SCHEMA dannys_diner;

CREATE TABLE sales (
  customer_id VARCHAR(1),
  order_date DATE,
  product_id INTEGER
);

INSERT INTO sales
  (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', 1),
  ('A', '2021-01-01', 2),
  ('A', '2021-01-07', 2),
  ('A', '2021-01-10', 3),
  ('A', '2021-01-11', 3),
  ('A', '2021-01-11', 3),
  ('B', '2021-01-01', 2),
  ('B', '2021-01-02', 2),
  ('B', '2021-01-04', 1),
  ('B', '2021-01-11', 1),
  ('B', '2021-01-16', 3),
  ('B', '2021-02-01', 3),
  ('C', '2021-01-01', 3),
  ('C', '2021-01-01', 3),
  ('C', '2021-01-07', 3);
 
 CREATE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);

INSERT INTO menu
  (product_id, product_name, price)
VALUES
  (1, 'sushi', 10),
  (2, 'curry', 15),
  (3, 'ramen', 12);
  

CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');

/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?--
SELECT customer_id, SUM(price) AS total_purchase
FROM sales
JOIN menu ON sales.product_id = menu.product_id
GROUP BY customer_id;

-- 2. How many days has each customer visited the restaurant?
SELECT customer_id, COUNT(DISTINCT order_date) AS visitting_days
FROM sales 
GROUP BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

WITH ordered_sales_cte AS
(
    SELECT s.customer_id,s.order_date, m.product_name,
DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS first_purchased
FROM sales s
JOIN menu m ON s.product_id = m.product_id
)
SELECT customer_id, product_name
FROM ordered_sales_cte
WHERE first_purchased = 1
GROUP BY customer_id, product_name
;

SELECT s.customer_id, s.order_date, m.product_name,
DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS first_purchased
FROM sales s
JOIN menu m ON s.product_id = m.product_id;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT m.product_name, COUNT(s.product_id) AS most_purchased
FROM menu m
JOIN sales s ON s.product_id = m.product_id
GROUP BY m.product_name
ORDER BY COUNT(s.product_id) DESC
LIMIT 1;

-- 5. Which item was the most popular for each customer?
With r AS
(
SELECT s.customer_id, m.product_name, COUNT(s.product_id) AS order_count,
DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY COUNT(s.product_id) DESC) AS most_popular 
FROM sales s
JOIN menu m ON s.product_id = m.product_id
GROUP BY s.customer_id, m.product_name)
SELECT customer_id, product_name, order_count
FROM r
WHERE most_popular =1
;

-- 6. Which item was purchased first by the customer after they became a member?
WITH mem_purchase_cte AS 
(
SELECT s.customer_id, m.product_name, s.order_date,
DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS r
FROM sales s
JOIN menu m ON s.product_id = m.product_id
JOIN members me ON s.customer_id = me.customer_id
WHERE s.order_date >= me.join_date
)
SELECT customer_id, product_name
FROM mem_purchase_cte
WHERE r = 1;

-- 7. Which item was purchased just before the customer became a member?
WITH mem_purchase_cte AS 
(
SELECT s.customer_id, m.product_name, s.order_date,
DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS r
FROM sales s
JOIN menu m ON s.product_id = m.product_id
JOIN members me ON s.customer_id = me.customer_id
WHERE s.order_date < me.join_date
)
SELECT customer_id, product_name
FROM mem_purchase_cte
WHERE r = 1;
-- 8. What is the total items and amount spent for each member before they became a member?
WITH mem_purchase_cte AS 
(
SELECT s.customer_id, m.product_name, s.order_date, m.price
FROM sales s
JOIN menu m ON s.product_id = m.product_id
JOIN members me ON s.customer_id = me.customer_id
WHERE s.order_date < me.join_date
)
SELECT customer_id, COUNT(product_name) AS total_items, SUM(price) AS amount_spent
FROM mem_purchase_cte
GROUP BY customer_id
;

SELECT s.customer_id, COUNT(m.product_name) AS total_items, SUM(m.price) AS amount_spent
FROM sales s
JOIN menu m ON s.product_id = m.product_id
JOIN members me ON s.customer_id = me.customer_id
WHERE s.order_date < me.join_date
GROUP BY customer_id;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
With order_points_cte AS
(
    SELECT s.customer_id, m.price,
CASE WHEN m.product_name = 'sushi' THEN m.price*20
     WHEN m.product_name !='sushi' THEN m.price*10
     END AS points
FROM sales s 
JOIN menu m ON s.product_id = m.product_id
)
SELECT customer_id, SUM(points)
FROM order_points_cte
GROUP BY customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
WITH member_points_cte AS
(
SELECT s.customer_id, m.product_name, m.price, s.order_date, me.join_date,
CASE WHEN order_date - join_date >= 0 AND order_date - join_date <= 6 THEN price*20
     WHEN order_date - join_date > 6 AND product_name = 'sushi' THEN price*20
     WHEN order_date < join_date AND product_name = 'sushi' THEN price*20
     ELSE price *10
     END AS points
FROM sales s
JOIN menu m ON s.product_id = m.product_id
JOIN members me ON me.customer_id = s.customer_id
)
SELECT customer_id, SUM(points)
FROM member_points_cte
WHERE order_date < '2021-02-01'
GROUP BY customer_id;

SELECT s.customer_id, SUM(CASE WHEN s.order_date BETWEEN me.join_date AND (me.join_date + 6) THEN m.price*20
     WHEN m.product_name ='sushi' THEN m.price*20
     ELSE price *10
     END) AS points
FROM sales s 
JOIN menu m ON s.product_id = m.product_id
JOIN members me ON s.customer_id = me.customer_id
WHERE order_date < '2021-02-01'
GROUP BY customer_id;

--Bonus Qs
--11. Recreate customer info table with member status
WITH r AS
(
  SELECT s.customer_id, s.order_date, m.product_name, m.price, 
CASE WHEN s.order_date < me.join_date THEN 'N'
     WHEN s.order_date >= me.join_date THEN 'Y'
     ELSE 'N'
     END AS member 
FROM sales s 
JOIN menu m ON s.product_id = m.product_id
LEFT JOIN members me ON me.customer_id = s.customer_id
)
SELECT *,
CASE WHEN member ='N' THEN 'Null'
     ELSE RANK () OVER (PARTITION BY s.customer_id, member ORDER BY s.order_date)
     END AS 'rank'
FROM r;


MISSING 12!!

